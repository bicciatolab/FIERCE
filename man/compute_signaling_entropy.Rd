% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FIERCE.R
\name{compute_signaling_entropy}
\alias{compute_signaling_entropy}
\title{compute_signaling_entropy}
\usage{
compute_signaling_entropy(
  adata,
  use_raw = FALSE,
  log_transform_input_matrix = TRUE,
  use_original_SCENT_network = FALSE,
  most_recent_network = TRUE,
  use_builtin_network = TRUE,
  species = "Human",
  network_nomenclature = "gene_symbol",
  network_threshold = "high",
  user_network = NULL,
  n_cores = 1,
  batch_size = 5000,
  compute_potency_states = FALSE,
  phenotype_annotation = NULL,
  potency_states_only_mode = "off",
  debug_mode = FALSE,
  adata_copy = FALSE
)
}
\arguments{
\item{adata}{anndata object generated by the "compute_velocity" function, and containing either the "spliced" and "spliced_future" layers, or the "Ms" and "Ms_future" layers}

\item{use_raw}{boolean; whether gene velocities have been computed from the normalized counts instead of the first order moments (see documentation for "compute_velocity" function). This will affect the layer from which entropies will be computed. Default is FALSE}

\item{log_transform_input_matrix}{boolean; whether to log-transform the input matrices before entropy computation. Default is TRUE}

\item{use_original_SCENT_network}{boolean; whether to use the original PPI network included in the SCENT package (human entrez ids only). If FALSE, one of the FIERCE built-in networks will be used. Default is FALSE}

\item{most_recent_network}{boolean; if use_original_SCENT_network=TRUE, use the most recent version of the PPI network. Default is TRUE}

\item{use_builtin_network}{boolean; whether to use one of the FIERCE built-in PPI networks. If FALSE (and use_original_SCENT_network=FALSE), the user must manually provide their own network. Default is TRUE}

\item{species}{only used if use_builtin_network=TRUE; choose between "Human" and "Mouse"}

\item{network_nomenclature}{only used if use_builtin_network=TRUE; gene nomenclature to use in the PPI network. Choose between "gene_symbol" or "entrez"}

\item{network_threshold}{only used if use_builtin_network=TRUE; minimum level of confidence required for the edges (i.e., the protein-protein interactions) of the PPI network. Choose between "medium" and "high". Default is "high"}

\item{user_network}{only used if use_builtin_network=FALSE and use_original_SCENT_network=FALSE; PPI network provided by the user. It must be a binary numeric matrix with gene names on both the rows and the columns, where 1 stands for "interaction" and 0 stands for "no interaction". The nomenclature of the genes must correspond to the nomenclature of the genes of the anndata object}

\item{n_cores}{number of cores to use for entropy computation. Default is 1. Parallel computing option is provided (and recommended) as this is the most time-consuming step of the FIERCE pipeline}

\item{batch_size}{number of cells in each batch for entropy computation}

\item{compute_potency_states}{boolean; whether to compute observed and future potency states by combining the distribution of total entropies with a pre-computed phenotype annotation. Default is FALSE}

\item{phenotype_annotation}{only used if compute_potency_states=TRUE; name of the cell annotation in the "obs" slot to combine with the distribution of total entropies for potency states computation}

\item{potency_states_only_mode}{if this mode is "on", only the potency states are computed from pre-existing entropy scores that are already stored in the anndata object. Very useful if the user wishes to try different phenotype annotations for potency states computation. Default is "off", change to "on" to activate}

\item{adata_copy}{boolean; if TRUE, create a new anndata object with the results of the analysis; if FALSE, update the provided anndata object. Default is FALSE}
}
\value{
If adata_copy=TRUE, a new anndata object with the results of the analysis will be returned. Otherwise (default), the provided anndata object will be updated with the results of the analysis. In both cases, the matrix of the velocities of the entropy and the matrices of the partial entropies (both observed and future) will be saved as additional layers
}
\description{
Computes both observed and future signaling entropies from observed and future spliced transcriptional states, respectively, and then computes the velocities of the entropy by subtracting observed entropies from future entropies. Signaling entropy is computed by the SCENT package, that works on the distribution of the expression signal of cells on a genome-wide Protein-Protein Interaction (PPI) network. Spliced transcriptional states are defined either as normalized spliced counts, or as spliced first order moments, depending on the input data from which gene velocities have been previously computed (see "compute_velocity" function). WARNING: signaling entropy is very accurate, but, as a downside, requires a very long computational time, especially for particularly large datasets. To avoid losing precious data, FIERCE subdivides the dataset into smaller batches (5000 cells by default, but it can be changed through the dedicated option) and saves the results after the computations for each batch are concluded. These results are saved into a temporary python dictionary that is placed into the current working directory, and is automatically removed after all the computations have been done. DO NOT REMOVE the dictionary until then, or you'll lose all the computations. If the computations are accidentally interrupted, just re-launch the function with the same command, and FIERCE will continue the analysis from the point where it was interrupted. For large datasets, it is recommended to set "adata_copy" to FALSE (to progressively update the anndata object with new results as the analysis proceeds) and to increase the number of allocated cores through the "n_cores" function
}
\examples{
#Run SCENT with the FIERCE built-in human gene symbol PPI network (high confidence). Infer potency states from total entropies and pre-computed cell clusters. Use parallel computing with 20 cores

compute_signaling_entropy(adata, use_builtin_network=TRUE, species="Human", network_nomenclature="gene_symbol", network_threshold="high", compute_potency_states=TRUE, phenotype_annotation="clusters", n_cores=20)

#Run SCENT on normalized spliced counts (instead of spliced first order moments) with a user provided PPI network. Do not compute potency states. Use parallel computing with 20 cores

compute_signaling_entropy(adata, use_raw=TRUE, use_builtin_network=FALSE, user_network=PPI_network, compute_potency_states=FALSE, n_cores=20)

#Run function in potency_states_only_mode, i.e., only the potency states will be computed from pre-existing entropy scores that are already stored in the anndata object. The results are saved in a new anndata object

adata_potency_states <- compute_signaling_entropy(adata, phenotype_annotation="clusters", potency_states_only_mode="on", adata_copy=TRUE)

}
